#!/usr/bin/env python3
#
# Copyright (c) 2021 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
import binascii
import sqlite3

from cryptography import x509
from cryptography.hazmat import backends
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, ec


class ProgramError(Exception):
    pass


def setup_database(database):
    cursor = database.cursor()

    cursor.execute('SELECT name FROM sqlite_master WHERE name = ?',
                   ('certificates',))

    row = cursor.fetchone()

    if row is not None:
        return

    cursor.execute('CREATE TABLE certificates (certificate_hash TEXT PRIMARY KEY, '
                   'serial_number TEXT NOT NULL, subject_name TEXT NOT NULL, issuer_name TEXT NOT NULL, '
                   'certificate TEXT NOT NULL, roles TEXT NOT NULL, ttl INTEGER) WITHOUT ROWID')

    database.commit()

    print('Setup database')


def add_certificate(database, certificate_file, roles, ttl):
    try:
        with open(certificate_file, 'rb') as file:
            certificate = file.read()

    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    try:
        certificate = x509.load_pem_x509_certificate(certificate, backends.default_backend())
    except ValueError:
        raise ProgramError(f'No certificate in file: {certificate_file}')

    public_key = certificate.public_key()

    if not isinstance(public_key, (rsa.RSAPublicKey, ec.EllipticCurvePublicKey)):
        raise ProgramError(f'No RSA or EC public-key in file: {certificate_file}')

    serial_number = serial_number = certificate.serial_number
    serial_number = serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')
    serial_number = binascii.hexlify(serial_number).decode('utf-8')

    subject_name = ''

    for attribute in certificate.subject:
        subject_name += (';' if len(subject_name) else '') + attribute.rfc4514_string()

    issuer_name = ''

    for attribute in certificate.issuer:
        issuer_name += (';' if len(issuer_name) else '') + attribute.rfc4514_string()

    certificate_hash = certificate.fingerprint(hashes.SHA256())
    certificate_hash = binascii.hexlify(certificate_hash).decode('utf-8')

    roles = ','.join(sorted(roles, key = lambda role: ('SAST', 'CCM', 'CCM+TFTP', 'TFTP', 'CAPF', 'APP-SERVER', 'TVS').index(role)))
    cursor = database.cursor()

    cursor.execute('INSERT INTO certificates (certificate_hash, serial_number, subject_name, issuer_name, certificate, roles, ttl) '
                   'VALUES (?, ?, ?, ?, ?, ?, ?) ON CONFLICT (certificate_hash) '
                   'DO UPDATE SET roles = excluded.roles, ttl = excluded.ttl',
                   (certificate_hash,
                    serial_number,
                    subject_name,
                    issuer_name,
                    certificate.public_bytes(serialization.Encoding.PEM),
                    roles,
                    ttl))

    database.commit()

    print('Added', certificate_hash, '<' + subject_name + '> with', roles)


def remove_certificate(database, certificate_hash):
    cursor = database.cursor()

    # RETURNING clause only available in sqlite >= 3.35
    cursor.execute('SELECT certificate_hash, subject_name, roles FROM certificates WHERE certificate_hash LIKE ?',
                   (certificate_hash + '%',))

    row = cursor.fetchone()

    if row is None:
        print(f'No certificate matching: {certificate_hash}')
        return

    cursor.execute('DELETE FROM certificates WHERE certificate_hash = ?',
                   (row['certificate_hash'],))

    database.commit()

    print('Removed',  row['certificate_hash'], '<' + row['subject_name'] + '> with', row['roles'])


def export_certificate(database, certificate_hash):
    cursor = database.cursor()

    cursor.execute('SELECT certificate FROM certificates WHERE certificate_hash LIKE ?',
                   (certificate_hash + '%',))

    row = cursor.fetchone()

    if row is None:
        print(f'No certificate matching: {certificate_hash}')
        return

    print(row['certificate'].decode('utf-8'), end = '')


def list_certificates(database):
    cursor = database.cursor()

    cursor.execute('SELECT certificate_hash, serial_number, subject_name, issuer_name, roles, ttl '
                   'FROM certificates ORDER BY subject_name ASC')

    rows = cursor.fetchall()

    if not len(rows):
        print('No certificates in database')
        return

    for row in rows:
        print('Certificate Hash:', row['certificate_hash'])
        print('Subject Name:    ', row['subject_name'])
        print('Issuer Name:     ', row['issuer_name'])
        print('Serial Number:   ', row['serial_number'])

        for role in row['roles'].split(','):
            print('Role:            ', role)

        print('TTL:             ', row['ttl'])
        print('')


def main():
    try:
        short_options = 'a:r:e:lL:scCtPATH'
        long_options = ['add=', 'remove=', 'export=', 'list', 'ttl=', 'sast', 'ccm', 'ccm-tftp', 'tftp', 'capf', 'app-server', 'tvs', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:])

        mode = None
        database_file = None
        certificate_file = None
        certificate_hash = None
        roles = set()
        ttl = 86400
        help = False

        for option, argument in options:
            if option in ('-a', '--add'):
                mode = 'add'
                certificate_file = argument

            elif option in ('-r', '--remove'):
                mode = 'remove'
                certificate_hash = argument

            elif option in ('-e', '--export'):
                mode = 'export'
                certificate_hash = argument

            elif option in ('-l', '--list'):
                mode = 'list'

            elif option in ('-L', '--ttl'):
                ttl = argument

                try:
                    ttl = int(ttl)
                except ValueError:
                    raise ProgramError(f'Invalid ttl: {ttl}')

                if ttl < 1 or ttl > 2592000:
                    raise ProgramError(f'TTL must be between 1 and 2592000')

            elif option in ('-s', '--sast'):
                roles.add('SAST')

            elif option in ('-c', '--ccm'):
                roles.add('CCM')

            elif option in ('-C', '--ccm-tftp'):
                roles.add('CCM+TFTP')

            elif option in ('-t', '--tftp'):
                roles.add('TFTP')

            elif option in ('-P', '--capf'):
                roles.add('CAPF')

            elif option in ('-A', '--app-server'):
                roles.add('APP-SERVER')

            elif option in ('-T', '--tvs'):
                roles.add('TVS')

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] DATABASE-FILE\n'
                  'Manage the certificate database for TVS.\n'
                  '\n'
                  '  -l, --list                list certificates\n'
                  '  -a, --add CERT-FILE       add certificate and roles into database\n'
                  '  -d, --delete CERT-HASH    delete certificate from database\n'
                  '  -e, --export CERT-HASH    export certificate from database\n'
                  '  -L, --ttl SECONDS         response TTL: from 1 to 2592000 (default 3600)\n'
                  '  -s, --sast                include SAST role\n'
                  '  -c, --ccm                 include CCM role\n'
                  '  -t, --tftp                include TFTP role\n'
                  '  -C, --ccm-tftp            include CCM+TFTP role\n'
                  '  -P, --capf                include CAPF role\n'
                  '  -A, --app-server          include APP-SERVER role\n'
                  '  -T, --tvs                 include TVS role\n'
                  '  -H, --help                print this help and exit\n'
                  '\n'
                  'DATABASE-FILE will be automatically created if it does not exist.\n'
                  'Specifying a certificate that already exists will overwrite that entry.\n')

            return

        if mode is None:
            raise ProgramError('No mode specified (add, remove, export or list). Try --help')

        if not len(arguments):
            raise ProgramError('No database file specified')

        if certificate_hash and not re.search(r'(?xi) ^ [a-f0-9]+ $', certificate_hash):
            raise ProgramError(f'Invalid certificate hash: {certificate_hash}')

        database_file = arguments[0]

        with sqlite3.connect(database_file) as database:
            database.row_factory = sqlite3.Row

            setup_database(database)

            if mode == 'add':
                if not len(roles):
                    raise ProgramError('No roles specified')

                add_certificate(database, certificate_file, roles, ttl)

            elif mode == 'remove':
                remove_certificate(database, certificate_hash)

            elif mode == 'export':
                export_certificate(database, certificate_hash)

            elif mode == 'list':
                list_certificates(database)

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
