#!/usr/bin/env python3
#
# Copyright (c) 2021 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
import sqlite3


class ProgramError(Exception):
    pass


def setup_database(database):
    cursor = database.cursor()

    cursor.execute('SELECT name FROM sqlite_master WHERE name = ?',
                   ('devices',))

    row = cursor.fetchone()

    if row is not None:
        return

    cursor.execute('CREATE TABLE devices (device_name TEXT PRIMARY KEY, operation TEXT NOT NULL, '
                   'authentication TEXT, password TEXT, key_size INTEGER, curve TEXT, certificate TEXT, '
                   'serial_number TEXT, not_valid_before TEXT, not_valid_after TEXT) WITHOUT ROWID')

    database.commit()

    print('Setup database')


def set_device_operation(database, device_name, operation, authentication, password, key_size, curve):
    cursor = database.cursor()

    cursor.execute('INSERT INTO devices (device_name, operation, authentication, password, key_size, curve) '
                   'VALUES (?, ?, ?, ?, ?, ?) ON CONFLICT (device_name) DO UPDATE '
                   'SET operation = excluded.operation, authentication = excluded.authentication, password = excluded.password, key_size = excluded.key_size, curve = excluded.curve',
                   (device_name,
                    operation,
                    authentication,
                    password,
                    key_size,
                    curve))

    database.commit()

    if operation == 'install':
        if key_size:
            print('Scheduled install on', device_name, 'with RSA', key_size, 'using', authentication)
        elif curve:
            print('Scheduled install on', device_name, 'with EC', curve, 'using', authentication)

    elif operation == 'fetch':
        print('Scheduled fetch on', device_name, 'using', authentication)

    elif operation == 'delete':
        print('Scheduled delete on', device_name, 'using', authentication)

    elif operation == 'none':
        print('Scheduled no operation', device_name, 'using', authentication)


def remove_device(database, device_name):
    cursor = database.cursor()

    # RETURNING clause only available in sqlite >= 3.35
    cursor.execute('SELECT device_name FROM devices WHERE device_name = ?',
                   (device_name,))

    row = cursor.fetchone()

    if row is None:
        print('Device', device_name, 'does not exist')
        return

    cursor.execute('DELETE FROM devices WHERE device_name = ?',
                   (row['device_name'],))

    print('Removed', row['device_name'])


def export_certificate(database, device_name):
    cursor = database.cursor()

    cursor.execute('SELECT certificate FROM devices WHERE device_name = ?',
                   (device_name,))

    row = cursor.fetchone()

    if row is None:
        print(device_name, 'does not exist')
        return

    if row['certificate'] is None:
        print(device_name, 'does not have a certificate')
        return

    print(row['certificate'].decode('utf-8'), end = '')


def list_devices(database):
    cursor = database.cursor()

    cursor.execute('SELECT device_name, operation, authentication, password, key_size, curve, certificate, serial_number, not_valid_before, not_valid_after '
                   'FROM devices ORDER BY device_name ASC')

    rows = cursor.fetchall()

    if not len(rows):
        print('No devices in database')
        return

    for row in rows:
        print('Device Name:        ', row['device_name'])
        print('Scheduled Operation:', row['operation'].title())
        print('Authentication Mode:', row['authentication'].title())

        if row['password']:
            print('Password:           ', row['password'])

        if row['key_size']:
            print('Key Algorithm:       RSA')
            print('Key Size:           ', row['key_size'])
        elif row['curve']:
            print('Key Algorithm:       EC')
            print('Curve:              ', row['curve'])

        if row['certificate'] is not None:
            print('Serial Number:      ', row['serial_number'])
            print('Certificate:        ', len(row['certificate']), 'bytes')
            print('Not Valid Before:   ', row['not_valid_before'])
            print('Not Valid After:    ', row['not_valid_after'])

        print('')


def main():
    try:
        short_options = 'i:f:d:n:p:c:b:E:r:e:lH'
        long_options = ['install=', 'fetch=', 'delete=', 'none=', 'password=', 'certificate', 'bits=', 'key-size=', 'curve=', 'remove=', 'export=', 'list', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:])

        mode = None
        device_name = None
        operation = None
        authentication = 'no password'
        password = None
        key_size = 2048
        curve = None

        help = False

        for option, argument in options:
            if option in ('-i', '--install'):
                mode, operation = 'set', 'install'
                device_name = argument

            elif option in ('-f', '--fetch'):
                mode, operation = 'set', 'fetch'
                device_name = argument

            elif option in ('-d', '--delete'):
                mode, operation = 'set', 'delete'
                device_name = argument

            elif option in ('-n', '--none'):
                mode, operation = 'set', 'none'
                device_name = argument

            elif option in ('-p', '--password'):
                authentication, password = 'password', argument

                if len(password) < 4 or len(password) > 15:
                    raise ProgramError('Invalid password length')

            elif option in ('-c', '--certificate'):
                authentication = 'certificate'

            elif option in ('-b', '--bits', '--key-size'):
                key_size = argument
                curve = None

                try:
                    key_size = int(key_size)

                    if key_size not in (512, 1024, 2048, 3072, 4096):
                        raise ValueError

                except ValueError:
                    raise ProgramError(f'Invalid key-size: {key_size}')

            elif option in ('-E', '--curve'):
                curve = argument
                key_size = None

                if curve not in ('secp256k1', 'secp384p1', 'secp521r1'):
                    raise ProgramError(f'Invalid curve: {curve}')

            elif option in ('-r', '--remove'):
                mode = 'remove'
                device_name = argument

            elif option in ('-e', '--export'):
                mode = 'export'
                device_name = argument

            if option in ('-l', '--list'):
                mode = 'list'

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] DATABASE-FILE\n'
                  'Manage the certificate database for CAPF.\n'
                  '\n'
                  '  -l, --list                     list devices\n'
                  '  -i, --install DEVICE-NAME      schedule install new certificate on device\n'
                  '  -f, --fetch DEVICE-NAME        schedule fetch certificate from device\n'
                  '  -d, --delete DEVICE-NAME       schedule delete certificate from device\n'
                  '  -n, --none DEVICE-NAME         no scheduled change to certificate on device\n'
                  '  -p, --password PASSWORD        authenticate using password\n'
                  '  -c, --certificate              authenticate using installed certificate\n'
                  '  -b, --bits, --key-size BITS    RSA key-size: 512, 1024, 2048, 3072 or 4096 (default 2048)\n'
                  '  -E, --curve CURVE              EC algorithm: secp256k1, secp384p1 or secp521r1\n'
                  '  -r, --remove DEVICE-NAME       remove device from database\n'
                  '  -e, --export DEVICE-NAME       export device certificate from database\n'
                  '  -H, --help                     print this help and exit\n'
                  '\n'
                  'DATABASE-FILE will be automatically created if it does not exist.\n'
                  'Specifying a device name that already exists will overwrite that entry.\n')

            return

        if mode is None:
            raise ProgramError('No mode specified (install, fetch, delete, none, remove, export or list). Try --help')

        if device_name and not re.search(r'(?x) ^ SEP [0-9A-F]{12} $', device_name):
            raise ProgramError(f'Invalid device name: {device_name}')

        if not len(arguments):
            raise ProgramError('No database file specified')

        database_file = arguments[0]

        with sqlite3.connect(database_file) as database:
            database.row_factory = sqlite3.Row

            setup_database(database)

            if mode == 'set':
                set_device_operation(database, device_name, operation, authentication, password, key_size, curve)

            elif mode == 'remove':
                remove_device(database, device_name)

            elif mode == 'export':
                export_certificate(database, device_name)

            elif mode == 'list':
                list_devices(database)

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
