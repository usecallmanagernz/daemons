#!/usr/bin/python3
#
# Copyright (c) 2021 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import socket
import select
import ssl
import getopt
import traceback
import threading
import signal
import logging
from datetime import datetime, timezone, timedelta
import struct
import binascii
import sqlite3

from cryptography import x509
from cryptography.x509 import oid
from cryptography.hazmat import backends
from cryptography.hazmat.primitives import hashes, serialization


PROTOCOL_ID = 85
PROTOCOL_VERSION = 3

COMMAND_AUTH_REQUEST = 1
COMMAND_AUTH_RESPONSE = 2
COMMAND_KEY_GEN_REQUEST = 3
COMMAND_KEY_GEN_RESPONSE = 4
COMMAND_ENCRYPT_RESPONSE = 5
COMMAND_ENCRYPT_REQUEST = 6
COMMAND_DECRYPT_REQUEST = 7
COMMAND_DECRYPT_RESPONSE = 8
COMMAND_STORE_CERT_REQUEST = 9
COMMAND_STORE_CERT_RESPONSE = 10
COMMAND_FETCH_CERT_REQUEST = 11
COMMAND_FETCH_CERT_RESPONSE = 12
COMMAND_DELETE_CERT_REQUEST = 13
COMMAND_DELETE_CERT_RESPONSE = 14
COMMAND_END_SESSION = 15
COMMAND_RETRY_LATER = 16
COMMAND_REQUEST_IN_PROGRESS = 17
COMMAND_STATUS_ENQUIRY = 18
COMMAND_STATUS_RESPONSE = 19
COMMAND_ABORT_REQUEST = 20
COMMAND_ABORT_RESPONSE = 21
COMMAND_SIGN_CERT_REQUEST = 22
COMMAND_SIGN_CERT_RESPONSE = 23

ELEMENT_REASON = 1
ELEMENT_REASON_INFO = 2
ELEMENT_CERTIFICATE_TYPE = 3
ELEMENT_CERTIFICATE = 4
ELEMENT_CERTIFICATE_ID = 5
ELEMENT_SIGNED_DATA = 6
ELEMENT_VERSION = 7
ELEMENT_AUTH_TYPE = 8
ELEMENT_PUBLIC_KEY = 9
ELEMENT_KEY_SIZE = 10
ELEMENT_AUTH_PASSWORD = 11
ELEMENT_RETRY_DELAY = 12
ELEMENT_DEVICE_NAME = 13
ELEMENT_SUDI_DATA = 16
ELEMENT_KEY_TYPE = 17
ELEMENT_EC_CURVE = 18
ELEMENT_DIGEST_TYPE = 19
ELEMENT_SIGNED_DATA_SHA2 = 20

REASON_NONE = 1
REASON_OPERATION = 7
REASON_DEVICE = 9

AUTH_TYPE_NONE = 0
AUTH_TYPE_PASSWORD = 1

CERTIFICATE_TYPE_LSC = 1
CERTIFICATE_TYPE_MIC = 2

KEY_TYPE_RSA = 0
KEY_TYPE_EC = 1

EC_CURVE_SECP256K1 = 0
EC_CURVE_SECP384P1 = 1
EC_CURVE_SECP521R1 = 2


database_file = None
issuer_certificate = None
issuer_private_key = None
validity_days = 365
server_session_id = 0


threading.main_thread().name = 'main-thread'
logging.basicConfig(level = logging.DEBUG, format = '%(threadName)s %(message)s', stream = sys.stdout, force = True)


class ProgramError(Exception):
    pass


def send_request(client_socket, command, session_id, elements):
    request = bytearray()
    request += struct.pack('> B B I H', PROTOCOL_ID, command, session_id, 0)

    for tag, value in elements.items():
        if tag == ELEMENT_REASON:
            reason = value
            request += struct.pack('> B H B', ELEMENT_REASON, 1, reason)

        elif tag == ELEMENT_CERTIFICATE_TYPE:
            certificate_type = value
            request += struct.pack('> B H B', ELEMENT_CERTIFICATE_TYPE, 1, certificate_type)

        elif tag == ELEMENT_CERTIFICATE:
            certificate = value
            certificate = struct.pack('> B H B B', 1, len(certificate) + 2, 0, CERTIFICATE_TYPE_LSC) + certificate

            request += struct.pack('> B H', ELEMENT_CERTIFICATE, len(certificate))
            request += certificate

        elif tag == ELEMENT_VERSION:
            version = value
            request += struct.pack('> B H B', ELEMENT_VERSION, 1, version)

        elif tag == ELEMENT_AUTH_TYPE:
            auth_type = value
            request += struct.pack('> B H B', ELEMENT_AUTH_TYPE, 1, auth_type)

        elif tag == ELEMENT_KEY_SIZE:
            key_size = value
            request += struct.pack('> B H H', ELEMENT_KEY_SIZE, 2, key_size)

        elif tag == ELEMENT_KEY_TYPE:
            key_type = value
            request += struct.pack('> B H B', ELEMENT_KEY_TYPE, 1, key_type)

        else:
            raise ProgramError(f'Unknown ELEMENT tag: {tag}')

    struct.pack_into('> H', request, 6, len(request) - 8)
    client_socket.send(request)


def receive_response(client_socket):
    response = client_socket.recv(8)

    if not len(response):
        raise ProgramError('Client closed socket')

    if len(response) != 8:
        raise ProgramError('Invalid header length')

    (protocol_id, command, session_id, length) = struct.unpack('> B B I H', response)

    if protocol_id != PROTOCOL_ID:
        raise ProgramError(f'Invalid protocol ID: {protocol_id}')

    while len(response) < (length + 8):
        response += client_socket.recv((length + 8) - len(response))

    elements = {}
    index = 8

    while index < len(response):
        (tag, length) = struct.unpack_from('> B H', response, index)
        index += 3

        if tag == ELEMENT_REASON:
            reason = response[index]
            elements[ELEMENT_REASON] = reason

        elif tag == ELEMENT_REASON_INFO:
            reason_info = response[index:index + length]
            reason_info = reason_info[:1].decode('utf-8')

            elements[ELEMENT_REASON_INFO] = reason_info

        elif tag == ELEMENT_CERTIFICATE_TYPE:
            certificate_type = response[index]
            elements[ELEMENT_CERTIFICATE_TYPE] = certificate_type

        elif tag == ELEMENT_CERTIFICATE:
            certificate = response[index:index + length]
            certificate = certificate[5:]

            elements[ELEMENT_CERTIFICATE] = certificate

        elif tag == ELEMENT_SIGNED_DATA:
            signed_data = response[index:index + length]
            elements[ELEMENT_SIGNED_DATA] = signed_data

        elif tag == ELEMENT_VERSION:
            version = response[index]
            elements[ELEMENT_VERSION] = version

        elif tag == ELEMENT_AUTH_PASSWORD:
            password = response[index:index + length]
            password = password[:-1].decode('utf-8')

            elements[ELEMENT_AUTH_PASSWORD] = password

        elif tag == ELEMENT_DEVICE_NAME:
            device_name = response[index:index + length]
            device_name = device_name[:-1].decode('utf-8')

            elements[ELEMENT_DEVICE_NAME] = device_name

        elif tag == ELEMENT_PUBLIC_KEY:
            public_key = response[index:index + length]
            elements[ELEMENT_PUBLIC_KEY] = public_key

        elif tag == ELEMENT_SUDI_DATA:
            sudi_data = response[index:index + length]
            elements[ELEMENT_SUDI_DATA] = sudi_data

        elif tag == ELEMENT_SIGNED_DATA_SHA2:
            signed_data_sha2 = response[index:index + length]
            elements[ELEMENT_SIGNED_DATA_SHA2] = signed_data_sha2

        else:
            raise ProgramError(f'Unknown ELEMENT tag: {tag}')

        index += length

    return command, session_id, elements


def install_certificate(client_socket, session_id, device_name, key_size, database):
    send_request(client_socket, COMMAND_KEY_GEN_REQUEST, session_id, {
        ELEMENT_KEY_SIZE: key_size,
        ELEMENT_KEY_TYPE: KEY_TYPE_RSA
    })

    command, session_id, elements = receive_response(client_socket)

    if command != COMMAND_REQUEST_IN_PROGRESS:
        raise ProgramError(f'Unexpected command: {command}')

    command, session_id, elements = receive_response(client_socket)

    if command != COMMAND_KEY_GEN_RESPONSE:
        raise ProgramError(f'Unexpected command: {command}')

    public_key = elements.get(ELEMENT_PUBLIC_KEY, None)

    if public_key is None:
        raise ProgramError('Missing ELEMENT_PUBLIC_KEY')

    global issuer_certificate, issuer_private_key, validity_days

    builder = x509.CertificateBuilder()

    subject_name = [x509.NameAttribute(oid.NameOID.COMMON_NAME, device_name)]
    subject_name.extend(issuer_certificate.subject.get_attributes_for_oid(oid.NameOID.ORGANIZATION_NAME))

    builder = builder.subject_name(x509.Name(subject_name))
    builder = builder.issuer_name(issuer_certificate.issuer)

    public_key = serialization.load_der_public_key(public_key, backends.default_backend())
    builder = builder.public_key(public_key)

    serial_number = int.from_bytes(os.urandom(16), byteorder = 'big')
    builder = builder.serial_number(serial_number)

    not_valid_before = datetime.now(timezone.utc)
    builder = builder.not_valid_before(not_valid_before)

    not_valid_after = datetime.now(timezone.utc) + timedelta(days = validity_days)
    builder = builder.not_valid_after(not_valid_after)

    basic_constraints = x509.BasicConstraints(ca = False, path_length = None)
    builder = builder.add_extension(basic_constraints, critical = True)

    key_usage = x509.KeyUsage(digital_signature = True, content_commitment = False, key_encipherment = True,
                              data_encipherment = False, key_agreement = False, key_cert_sign = False,
                              crl_sign = False, encipher_only = False, decipher_only = False)
    builder = builder.add_extension(key_usage, critical = True)

    # 1.3.6.1.5.5.7.3.5 is IPsec End System
    extended_key_usage = x509.ExtendedKeyUsage([oid.ExtendedKeyUsageOID.SERVER_AUTH,
                                                oid.ExtendedKeyUsageOID.CLIENT_AUTH,
                                                oid.ObjectIdentifier('1.3.6.1.5.5.7.3.5')])
    builder = builder.add_extension(extended_key_usage, critical = False)

    subject_alt_name = x509.SubjectAlternativeName([x509.UniformResourceIdentifier(device_name)])
    builder = builder.add_extension(subject_alt_name, critical = False)

    certificate = builder.sign(issuer_private_key, hashes.SHA256(), backends.default_backend())
    cursor = database.cursor()

    cursor.execute('UPDATE devices SET operation = ?, serial_number = ?, certificate = ?, not_valid_before = ?, not_valid_after = ? '
                   'WHERE device_name = ?',
                   ('NONE',
                    binascii.hexlify(serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')).decode('utf-8'),
                    certificate.public_bytes(serialization.Encoding.PEM),
                    not_valid_before.strftime('%Y-%m-%d %H:%M:%S'),
                    not_valid_after.strftime('%Y-%m-%d %H:%M:%S'),
                    device_name))

    database.commit()

    logging.info('Result: Installed certificate')

    send_request(client_socket, COMMAND_STORE_CERT_REQUEST, session_id, {
        ELEMENT_CERTIFICATE_TYPE: CERTIFICATE_TYPE_LSC,
        ELEMENT_CERTIFICATE: certificate.public_bytes(serialization.Encoding.DER)
    })

    command, session_id, elements = receive_response(client_socket)

    if command != COMMAND_STORE_CERT_RESPONSE:
        raise ProgramError(f'Unexpected command: {command}')

    send_request(client_socket, COMMAND_END_SESSION, session_id, {
        ELEMENT_REASON: REASON_NONE
    })


def fetch_certificate(client_socket, session_id, device_name, database):
    send_request(client_socket, COMMAND_FETCH_CERT_REQUEST, session_id, {})
    command, session_id, elements = receive_response(client_socket)

    if command != COMMAND_FETCH_CERT_RESPONSE:
        raise ProgramError(f'Unexpected command: {command}')

    certificate = elements.get(ELEMENT_CERTIFICATE, None)

    if certificate is None:
        raise ProgramError('Missing ELEMENT_CERTIFICATE')

    try:
        certificate = x509.load_der_x509_certificate(certificate, backends.default_backend())
    except ValueError:
        raise ProgramError('Invalid certificate')

    serial_number = certificate.serial_number
    not_valid_before = certificate.not_valid_before
    not_valid_after = certificate.not_valid_after

    cursor = database.cursor()

    cursor.execute('UPDATE devices SET operation = ?, serial_number = ?, certificate = ?, not_valid_before = ?, not_valid_after = ? '
                   'WHERE device_name = ?',
                   ('NONE',
                    binascii.hexlify(serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')).decode('utf-8'),
                    certificate.public_bytes(serialization.Encoding.PEM),
                    not_valid_before.strftime('%Y-%m-%d %H:%M:%S'),
                    not_valid_after.strftime('%Y-%m-%d %H:%M:%S'),
                    device_name))

    database.commit()

    logging.info('Result: Fetched certificate')

    send_request(client_socket, COMMAND_END_SESSION, session_id, {
        ELEMENT_REASON: REASON_NONE
    })


def delete_certificate(client_socket, session_id, device_name, database):
    send_request(client_socket, COMMAND_DELETE_CERT_REQUEST, session_id, {})
    command, session_id, elements = receive_response(client_socket)

    if command != COMMAND_DELETE_CERT_RESPONSE:
        raise ProgramError(f'Unexpected command: {command}')

    cursor = database.cursor()

    cursor.execute('UPDATE devices SET operation = ?, serial_number = NULL, certificate = NULL, not_valid_before = NULL, not_valid_after = NULL '
                   'WHERE device_name = ?',
                   ('NONE',
                    device_name))

    database.commit()

    logging.info('Result: Deleted certificate')

    send_request(client_socket, COMMAND_END_SESSION, session_id, {
        ELEMENT_REASON: REASON_NONE
    })


def handle_client(client_socket):
    try:
        global server_session_id

        server_session_id += 1
        session_id = server_session_id

        send_request(client_socket, COMMAND_AUTH_REQUEST, session_id, {
            ELEMENT_VERSION: PROTOCOL_VERSION,
            ELEMENT_AUTH_TYPE: AUTH_TYPE_NONE
        })

        command, session_id, elements = receive_response(client_socket)

        if command != COMMAND_AUTH_RESPONSE:
            raise ProgramError(f'Unexpected command: {command}')

        version = elements.get(ELEMENT_VERSION, None)

        if version != PROTOCOL_VERSION:
            raise ProgramError(f'Invalid ELEMENT_VERSION: {version}')

        device_name = elements.get(ELEMENT_DEVICE_NAME, None)

        if device_name is None:
            raise ProgramError(f'Missing ELEMENT_DEVICE_NAME')

        logging.info('Device Name: %s', device_name)

        password = elements.get(ELEMENT_AUTH_PASSWORD, None)

        global database_file

        with sqlite3.connect(database_file) as database:
            database.row_factory = sqlite3.Row
            cursor = database.cursor()

            cursor.execute('SELECT operation, key_size, password FROM devices WHERE device_name = ?',
                           (device_name,))

            row = cursor.fetchone()

            if row is None:
                logging.info('Unknown device: %s', device_name)

                send_request(client_socket, COMMAND_END_SESSION, session_id, {
                    ELEMENT_REASON: REASON_DEVICE
                })

            elif row['password'] is not None and row['password'] != password:
                logging.info('Incorrect password: %s', password)

                send_request(client_socket, COMMAND_END_SESSION, session_id, {
                    ELEMENT_REASON: REASON_OPERATION
                })

            else:
                logging.info('Operation: %s', row['operation'])

                if row['operation'] == 'INSTALL':
                    logging.info('Key Size: %s', row['key_size'])
                    install_certificate(client_socket, session_id, device_name, row['key_size'], database)

                elif row['operation'] == 'FETCH':
                    fetch_certificate(client_socket, session_id, device_name, database)

                elif row['operation'] == 'DELETE':
                    delete_certificate(client_socket, session_id, device_name, database)

                elif row['operation'] == 'NONE':
                    send_request(client_socket, COMMAND_END_SESSION, session_id, {
                        ELEMENT_REASON: REASON_OPERATION
                    })

    except (ProgramError, sqlite3.Error) as error:
        logging.error('Error: %s', error)

    except Exception:
        logging.error('%s', traceback.format_exc())

    client_socket.close()


def start_server(port, timeout, capf_certificate_file):
    ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)

    try:
        ssl_context.load_cert_chain(capf_certificate_file)
    except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
        raise ProgramError(f'{error.strerror}: {error.filename}')

    ssl_context.verify_mode = ssl.CERT_NONE

    try:
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.settimeout(timeout)

        server_socket = ssl_context.wrap_socket(server_socket, server_side = True)

        server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
        server_socket.bind(('0.0.0.0', port))

        server_socket.listen(5)

    except ssl.SSLError as error:
        raise ProgramError(error.reason)

    except OSError as error:
        raise ProgramError(error)

    logging.info('Listening Port: %d', port)

    poll = select.poll()
    poll.register(server_socket.fileno(), select.POLLIN)

    for signum in signal.SIGINT, signal.SIGQUIT, signal.SIGTERM:
        signal.signal(signum, stop_server)

    try:
        while True:
            events = poll.poll(60)

            for fileno, event in events:
                if fileno != server_socket.fileno() or not event & select.POLLIN:
                    continue

                try:
                    client_socket, unused = server_socket.accept()

                except OSError as error:
                    logging.error('%s', str(error))
                    continue

                ip_address, port = client_socket.getpeername()

                thread = threading.Thread(daemon = True, name = f'{ip_address}:{port}', target = handle_client, args = (client_socket,))
                thread.start()

    except InterruptedError:
        pass

    server_socket.close()


def stop_server(signum, frame):
    raise InterruptedError


def main():
    try:
        short_options = 'p:t:A:i:d:H'
        long_options = ['port=', 'timeout=', 'capf=', 'issuer=', 'days=', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:])

        global database_file, validity_days

        port = 3804
        timeout = 10
        capf_certificate_file = None
        issuer_certificate_file = None
        help = False

        for option, argument in options:
            if option in ('-p', '--port'):
                port = argument

                try:
                    port = int(port)

                    if port < 1 or port > 65535:
                        raise ValueError

                except ValueError:
                    raise ProgramError(f'Invalid port: {port}')

            elif option in ('-t', '--timeout'):
                timeout = argument

                try:
                    timeout = int(timeout)
                except ValueError:
                    raise ProgramError(f'Invalid timeout: {timeout}')

            elif option in ('-A', '--capf'):
                capf_certificate_file = argument

            elif option in ('-i', '--issuer'):
                issuer_certificate_file = argument

            elif option in ('-d', '--days'):
                validity_days = argument

                try:
                    validity_days = int(validity_days)

                    if validity_days < 1 or validity_days > 3560:
                        raise ValueError

                except ValueError:
                    raise ProgramError(f'Invalid days: {validity_days}')

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] DATABASE-FILE\n'
                  'Issue X509 certficates to phones.\n'
                  '\n'
                  '  -A, --capf CAPF-CERT-FILE        CAPF certificate\n'
                  '  -i, --issuer ISSUER-CERT-FILE    issuing (CA) certificate that will used for signing\n'
                  '  -p, --port PORT                  port CAPF server is listening on (default 3804)\n'
                  '  -t, --timeout TIMEOUT            connection timeout in seconds (default 10)\n'
                  '  -d, --days DAYS                  number of days the certificate will be valid (default 365)\n'
                  '  -H, --help                       print this help and exit\n'
                  '\n'
                  'If no ISSUER-CERT-FILE is supplied CAPF-CERT-FILE will be used.')

            return

        if not len(arguments):
            raise ProgramError('No database file specified')

        database_file = arguments[0]

        if capf_certificate_file is None:
            raise ProgramError('No CAPF certificate .pem file specified')

        if issuer_certificate_file is None:
            issuer_certificate_file = capf_certificate_file

        global issuer_certificate, issuer_private_key

        try:
            with open(issuer_certificate_file, 'rb') as file:
                issuer_certificate = issuer_private_key = file.read()

        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        try:
            issuer_certificate = x509.load_pem_x509_certificate(issuer_certificate, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No certificate in file: {issuer_certificate_file}')

        try:
            issuer_private_key = serialization.load_pem_private_key(issuer_private_key, None, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No private key in file: {issuer_certificate_file}')

        start_server(port, timeout, capf_certificate_file)

    except ProgramError as error:
        logging.error('%s', str(error))
        exit(1)

    except Exception:
        logging.error('%s', traceback.format_exc())
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
