#!/usr/bin/env python3
#
# Copyright (c) 2021 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os
import os.path
import socket
import select
import ssl
import getopt
import traceback
import threading
import signal
import logging
from datetime import datetime, timezone, timedelta
import struct
import binascii
import sqlite3

from cryptography import x509
from cryptography.x509 import oid
from cryptography.hazmat import backends
from cryptography.hazmat.primitives import hashes, serialization


PROTOCOL_ID = 85
PROTOCOL_VERSION = 3

COMMAND_AUTH_REQUEST = 1
COMMAND_AUTH_RESPONSE = 2
COMMAND_KEY_GEN_REQUEST = 3
COMMAND_KEY_GEN_RESPONSE = 4
COMMAND_ENCRYPT_RESPONSE = 5
COMMAND_ENCRYPT_REQUEST = 6
COMMAND_DECRYPT_REQUEST = 7
COMMAND_DECRYPT_RESPONSE = 8
COMMAND_STORE_CERT_REQUEST = 9
COMMAND_STORE_CERT_RESPONSE = 10
COMMAND_FETCH_CERT_REQUEST = 11
COMMAND_FETCH_CERT_RESPONSE = 12
COMMAND_DELETE_CERT_REQUEST = 13
COMMAND_DELETE_CERT_RESPONSE = 14
COMMAND_END_SESSION = 15
COMMAND_RETRY_LATER = 16
COMMAND_REQUEST_IN_PROGRESS = 17
COMMAND_STATUS_REQUEST = 18
COMMAND_STATUS_RESPONSE = 19
COMMAND_ABORT_REQUEST = 20
COMMAND_ABORT_RESPONSE = 21
COMMAND_SIGN_CERT_REQUEST = 22
COMMAND_SIGN_CERT_RESPONSE = 23

ELEMENT_REASON = 1
ELEMENT_REASON_INFO = 2
ELEMENT_CERTIFICATE_TYPE = 3
ELEMENT_CERTIFICATE = 4
ELEMENT_CERTIFICATE_ID = 5
ELEMENT_SIGNED_DATA = 6
ELEMENT_VERSION = 7
ELEMENT_AUTH_TYPE = 8
ELEMENT_PUBLIC_KEY = 9
ELEMENT_KEY_SIZE = 10
ELEMENT_AUTH_PASSWORD = 11
ELEMENT_RETRY_DELAY = 12
ELEMENT_DEVICE_NAME = 13
ELEMENT_SUDI_DATA = 16
ELEMENT_KEY_TYPE = 17
ELEMENT_EC_CURVE = 18
ELEMENT_DIGEST_TYPE = 19
ELEMENT_SIGNED_DATA_SHA2 = 20

REASON_NO_ACTION = 0
REASON_UPDATE_CERTIFICATE = 1
REASON_INVALID_ELEMENT = 7
REASON_UNKNOWN_DEVICE = 9

AUTH_TYPE_NONE = 0
AUTH_TYPE_PASSWORD = 1

CERTIFICATE_TYPE_LSC = 1
CERTIFICATE_TYPE_MIC = 2

KEY_TYPE_RSA = 0
KEY_TYPE_EC = 1

EC_CURVE_SECP256K1 = 0
EC_CURVE_SECP384P1 = 1
EC_CURVE_SECP521R1 = 2


threading.main_thread().name = 'CAPF'
logging.basicConfig(level = logging.DEBUG, format = '%(threadName)s %(message)s', stream = sys.stdout, force = True)


class ProgramError(Exception):
    pass


class CapfServer:
    session_id = 0

    def __init__(self, port, timeout, capf_certificate_file):
        self.server_socket = None

        ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)

        try:
            ssl_context.load_cert_chain(capf_certificate_file)
        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        ssl_context.verify_mode = ssl.CERT_NONE

        try:
            self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.server_socket.settimeout(timeout)

            self.server_socket = ssl_context.wrap_socket(self.server_socket, server_side = True)

            self.server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, True)
            self.server_socket.bind(('0.0.0.0', port))

            self.server_socket.listen(5)

        except ssl.SSLError as error:
            raise ProgramError(error.reason)

        except OSError as error:
            raise ProgramError(error.strerror)

        logging.info('Listening Port: %d', port)

    def __del__(self):
        if self.server_socket is not None:
            self.server_socket.close()

    def run(self):
        poll = select.poll()
        poll.register(self.server_socket.fileno(), select.POLLIN)

        for signum in signal.SIGINT, signal.SIGQUIT, signal.SIGTERM:
            signal.signal(signum, self.shutdown)

        try:
            while True:
                events = poll.poll(60)

                for fileno, event in events:
                    if fileno != self.server_socket.fileno() or not event & select.POLLIN:
                        continue

                    try:
                        client_socket, _ = self.server_socket.accept()
                        ip_address, port = client_socket.getpeername()

                    except OSError as error:
                        logging.error('%s', error.strerror)
                        continue

                    capf_connection = CapfConnection(client_socket)

                    thread = threading.Thread(daemon = True, name = f'{ip_address}:{port}', target = capf_connection.run)
                    thread.start()

        except InterruptedError:
            pass

    def shutdown(self, signum, frame):
        raise InterruptedError


class CapfConnection:
    database_file = None
    certificates_dir = None
    issuer_certificate_file = None
    validity_days = 0

    def __init__(self, client_socket):
        CapfServer.session_id += 1
        session_id = CapfServer.session_id

        self.client_socket = client_socket
        self.session_id = session_id

    def __del__(self):
        self.client_socket.close()

    def run(self):
        try:
            self.send_request(COMMAND_AUTH_REQUEST, {
                ELEMENT_VERSION: PROTOCOL_VERSION,
                ELEMENT_AUTH_TYPE: AUTH_TYPE_NONE
            })

            command, elements = self.receive_response()

            if command != COMMAND_AUTH_RESPONSE:
                raise ProgramError(f'Unexpected command: {command}')

            version = elements.get(ELEMENT_VERSION, None)

            if version != PROTOCOL_VERSION:
                raise ProgramError(f'Invalid protocol version: {version}')

            device_name = elements.get(ELEMENT_DEVICE_NAME, None)

            if device_name is None:
                raise ProgramError(f'Missing device name element')

            logging.info('Device Name: %s', device_name)

            password = elements.get(ELEMENT_AUTH_PASSWORD, None)

            with sqlite3.connect(CapfConnection.database_file) as database:
                database.row_factory = sqlite3.Row
                cursor = database.cursor()

                cursor.execute('SELECT operation, password, key_size, curve FROM devices WHERE device_name = ?',
                               (device_name,))

                row = cursor.fetchone()

                if row is None:
                    logging.info('Unknown device: %s', device_name)
                    self.send_request(COMMAND_END_SESSION, {ELEMENT_REASON: REASON_UNKNOWN_DEVICE})

                    return

                if row['password'] is not None and row['password'] != password:
                    logging.info('Incorrect password: %s', password)
                    self.send_request(COMMAND_END_SESSION, {ELEMENT_REASON: REASON_INVALID_ELEMENT})

                    return

                logging.info('Scheduled Operation: %s', row['operation'].title())

                if row['operation'] == 'install':
                    self.install_certificate(device_name, row['key_size'], row['curve'], database)

                elif row['operation'] == 'fetch':
                    self.fetch_certificate(device_name, database)

                elif row['operation'] == 'delete':
                    self.delete_certificate(device_name, database)

                elif row['operation'] == 'none':
                    self.send_request(COMMAND_END_SESSION, {ELEMENT_REASON: REASON_NO_ACTION})

        except (ProgramError, sqlite3.Error) as error:
            logging.error('Error: %s', error)

        except Exception:
            logging.error('%s', traceback.format_exc())

    def send_request(self, command, elements):
        request = bytearray(struct.pack('> B B I H', PROTOCOL_ID, command, self.session_id, 0))

        for tag, value in elements.items():
            if tag == ELEMENT_REASON:
                reason = value
                request += struct.pack('> B H B', ELEMENT_REASON, 1, reason)

            elif tag == ELEMENT_CERTIFICATE_TYPE:
                certificate_type = value
                request += struct.pack('> B H B', ELEMENT_CERTIFICATE_TYPE, 1, certificate_type)

            elif tag == ELEMENT_CERTIFICATE:
                certificate = value
                certificate = struct.pack('> B H B B', 1, len(certificate) + 2, 0, CERTIFICATE_TYPE_LSC) + certificate

                request += struct.pack('> B H', ELEMENT_CERTIFICATE, len(certificate))
                request += certificate

            elif tag == ELEMENT_VERSION:
                version = value
                request += struct.pack('> B H B', ELEMENT_VERSION, 1, version)

            elif tag == ELEMENT_AUTH_TYPE:
                auth_type = value
                request += struct.pack('> B H B', ELEMENT_AUTH_TYPE, 1, auth_type)

            elif tag == ELEMENT_KEY_SIZE:
                key_size = value
                request += struct.pack('> B H H', ELEMENT_KEY_SIZE, 2, key_size)

            elif tag == ELEMENT_KEY_TYPE:
                key_type = value
                request += struct.pack('> B H B', ELEMENT_KEY_TYPE, 1, key_type)

            elif tag == ELEMENT_EC_CURVE:
                ec_curve = value
                request += struct.pack('> B H B', ELEMENT_EC_CURVE, 1, ec_curve)

            else:
                raise ProgramError(f'Unknown element tag: {tag}')

        struct.pack_into('> H', request, 6, len(request) - 8)
        self.client_socket.sendall(request)

    def receive_response(self):
        response = bytearray(self.client_socket.recv(8))

        if not len(response):
            raise ProgramError('Client closed socket')

        if len(response) != 8:
            raise ProgramError('Invalid header length')

        (protocol_id, command, session_id, length) = struct.unpack('> B B I H', response)

        if protocol_id != PROTOCOL_ID:
            raise ProgramError(f'Invalid protocol ID: {protocol_id}')

        if session_id != self.session_id:
            raise ProgramError(f'Mismatched session ID: {session_id}')

        while len(response) < (length + 8):
            response_chunk = self.client_socket.recv((length + 8) - len(response))

            if not len(response_chunk):
                break

            response += response_chunk

        if len(response) != (length + 8):
            raise ProgramError('Truncated response')

        elements = {}
        index = 8

        while index < len(response):
            (tag, length) = struct.unpack_from('> B H', response, index)
            index += 3

            if tag == ELEMENT_REASON:
                reason = response[index]
                elements[ELEMENT_REASON] = reason

            elif tag == ELEMENT_REASON_INFO:
                reason_info = response[index:index + length]
                reason_info = reason_info[:1].decode('utf-8')

                elements[ELEMENT_REASON_INFO] = reason_info

            elif tag == ELEMENT_CERTIFICATE_TYPE:
                certificate_type = response[index]
                elements[ELEMENT_CERTIFICATE_TYPE] = certificate_type

            elif tag == ELEMENT_CERTIFICATE:
                certificate = response[index:index + length]
                certificate = certificate[5:]

                elements[ELEMENT_CERTIFICATE] = certificate

            elif tag == ELEMENT_SIGNED_DATA:
                signed_data = response[index:index + length]
                elements[ELEMENT_SIGNED_DATA] = signed_data

            elif tag == ELEMENT_VERSION:
                version = response[index]
                elements[ELEMENT_VERSION] = version

            elif tag == ELEMENT_AUTH_PASSWORD:
                password = response[index:index + length]
                password = password[:-1].decode('utf-8')

                elements[ELEMENT_AUTH_PASSWORD] = password

            elif tag == ELEMENT_DEVICE_NAME:
                device_name = response[index:index + length]
                device_name = device_name[:-1].decode('utf-8')

                elements[ELEMENT_DEVICE_NAME] = device_name

            elif tag == ELEMENT_PUBLIC_KEY:
                public_key = response[index:index + length]
                elements[ELEMENT_PUBLIC_KEY] = public_key

            elif tag == ELEMENT_SUDI_DATA:
                sudi_data = response[index:index + length]
                elements[ELEMENT_SUDI_DATA] = sudi_data

            elif tag == ELEMENT_SIGNED_DATA_SHA2:
                signed_data_sha2 = response[index:index + length]
                elements[ELEMENT_SIGNED_DATA_SHA2] = signed_data_sha2

            else:
                raise ProgramError(f'Unknown ELEMENT tag: {tag}')

            index += length

        return command, elements

    def install_certificate(self, device_name, key_size, curve, database):
        if key_size:
            logging.info('Key Algorithm: RSA')
            logging.info('Key Size %d', key_size)

            self.send_request(COMMAND_KEY_GEN_REQUEST, {
                ELEMENT_KEY_TYPE: KEY_TYPE_RSA,
                ELEMENT_KEY_SIZE: key_size
            })

            command, elements = self.receive_response()

            # Only occurs when generating an RSA key
            if command != COMMAND_REQUEST_IN_PROGRESS:
                raise ProgramError(f'Unexpected command: {command}')

        elif curve:
            logging.info('Key Algorithm: EC')
            logging.info('Curve: %s', curve)

            if curve == 'secp256k1':
                ec_curve = EC_CURVE_SECP256K1
            elif curve == 'secp384p1':
                ec_curve = EC_CURVE_SECP384P1
            elif key_size == 'secp521r1':
                ec_curve = EC_CURVE_SECP521R1

            self.send_request(COMMAND_KEY_GEN_REQUEST, {
                ELEMENT_KEY_TYPE: KEY_TYPE_EC,
                ELEMENT_EC_CURVE: ec_curve
            })

        command, elements = self.receive_response()

        if command != COMMAND_KEY_GEN_RESPONSE:
            raise ProgramError(f'Unexpected command: {command}')

        public_key = elements.get(ELEMENT_PUBLIC_KEY, None)

        if public_key is None:
            reason = elements.get(ELEMENT_REASON, -1)

            logging.info('Error: Key generation failed (%d)', reason)
            self.send_request(COMMAND_END_SESSION, {ELEMENT_REASON: REASON_INVALID_ELEMENT})

            return

        try:
            with open(CapfConnection.issuer_certificate_file, 'rb') as file:
                issuer_certificate = issuer_private_key = file.read()

        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        try:
            issuer_certificate = x509.load_pem_x509_certificate(issuer_certificate, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No certificate in file: {self.issuer_certificate_file}')

        try:
            issuer_private_key = serialization.load_pem_private_key(issuer_private_key, None, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No private key in file: {self.issuer_certificate_file}')

        builder = x509.CertificateBuilder()

        subject_name = [x509.NameAttribute(oid.NameOID.COMMON_NAME, device_name)]

        for attribute in issuer_certificate.subject:
            if attribute.oid in (oid.NameOID.ORGANIZATION_NAME, oid.NameOID.ORGANIZATIONAL_UNIT_NAME,
                                 oid.NameOID.LOCALITY_NAME, oid.NameOID.STATE_OR_PROVINCE_NAME, oid.NameOID.COUNTRY_NAME):
                subject_name.append(attribute)

        builder = builder.subject_name(x509.Name(subject_name))
        builder = builder.issuer_name(issuer_certificate.issuer)

        public_key = serialization.load_der_public_key(public_key, backends.default_backend())
        builder = builder.public_key(public_key)

        serial_number = int.from_bytes(os.urandom(16), byteorder = 'big')
        builder = builder.serial_number(serial_number)

        not_valid_before = datetime.now(timezone.utc)
        builder = builder.not_valid_before(not_valid_before)

        not_valid_after = datetime.now(timezone.utc) + timedelta(days = CapfConnection.validity_days)
        builder = builder.not_valid_after(not_valid_after)

        basic_constraints = x509.BasicConstraints(ca = False, path_length = None)
        builder = builder.add_extension(basic_constraints, critical = True)

        key_usage = x509.KeyUsage(digital_signature = True, content_commitment = False, key_encipherment = True,
                                  data_encipherment = False, key_agreement = False, key_cert_sign = False,
                                  crl_sign = False, encipher_only = False, decipher_only = False)
        builder = builder.add_extension(key_usage, critical = True)

        # 1.3.6.1.5.5.7.3.5 is IPsec End System
        extended_key_usage = x509.ExtendedKeyUsage([oid.ExtendedKeyUsageOID.SERVER_AUTH,
                                                    oid.ExtendedKeyUsageOID.CLIENT_AUTH,
                                                    oid.ObjectIdentifier('1.3.6.1.5.5.7.3.5')])
        builder = builder.add_extension(extended_key_usage, critical = False)

        subject_alt_name = x509.SubjectAlternativeName([x509.UniformResourceIdentifier(device_name)])
        builder = builder.add_extension(subject_alt_name, critical = False)

        certificate = builder.sign(issuer_private_key, hashes.SHA256(), backends.default_backend())
        cursor = database.cursor()

        cursor.execute('UPDATE devices SET operation = ?, serial_number = ?, certificate = ?, not_valid_before = ?, not_valid_after = ? '
                       'WHERE device_name = ?',
                       ('none',
                        binascii.hexlify(serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')).decode('utf-8'),
                        certificate.public_bytes(serialization.Encoding.PEM),
                        not_valid_before.strftime('%Y-%m-%d %H:%M:%S'),
                        not_valid_after.strftime('%Y-%m-%d %H:%M:%S'),
                        device_name))

        database.commit()

        try:
            with open(f'{CapfConnection.certificates_dir}/{device_name}.pem', 'wb') as file:
                file.write(certificate.public_bytes(serialization.Encoding.PEM))

        except (PermissionError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        logging.info('Result: Installed certificate')

        self.send_request(COMMAND_STORE_CERT_REQUEST, {
            ELEMENT_CERTIFICATE_TYPE: CERTIFICATE_TYPE_LSC,
            ELEMENT_CERTIFICATE: certificate.public_bytes(serialization.Encoding.DER)
        })

        command, elements = self.receive_response()

        if command != COMMAND_STORE_CERT_RESPONSE:
            raise ProgramError(f'Unexpected command: {command}')

        reason = elements.get(ELEMENT_REASON, -1)

        if reason != REASON_UPDATE_CERTIFICATE:
            logging.info('Error: Failed to store certificate (%d)', reason)

        self.send_request(COMMAND_END_SESSION, {ELEMENT_REASON: REASON_UPDATE_CERTIFICATE})

    def fetch_certificate(self, device_name, database):
        self.send_request(COMMAND_FETCH_CERT_REQUEST, {})
        command, elements = self.receive_response()

        if command != COMMAND_FETCH_CERT_RESPONSE:
            raise ProgramError(f'Unexpected command: {command}')

        reason = elements.get(ELEMENT_REASON, -1)

        if reason != REASON_UPDATE_CERTIFICATE:
            logging.info('Error: Fetch certificate failed (%d)', reason)
        else:
            certificate = elements.get(ELEMENT_CERTIFICATE, None)

            if certificate is None:
                raise ProgramError('Missing certificate element')

            try:
                certificate = x509.load_der_x509_certificate(certificate, backends.default_backend())
            except ValueError:
                raise ProgramError('Invalid certificate')

            serial_number = certificate.serial_number
            not_valid_before = certificate.not_valid_before
            not_valid_after = certificate.not_valid_after

            cursor = database.cursor()

            cursor.execute('UPDATE devices SET operation = ?, serial_number = ?, certificate = ?, not_valid_before = ?, not_valid_after = ? '
                           'WHERE device_name = ?',
                           ('none',
                            binascii.hexlify(serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')).decode('utf-8'),
                            certificate.public_bytes(serialization.Encoding.PEM),
                            not_valid_before.strftime('%Y-%m-%d %H:%M:%S'),
                            not_valid_after.strftime('%Y-%m-%d %H:%M:%S'),
                            device_name))

            database.commit()

            try:
                with open(f'{CapfConnection.certificates_dir}/{device_name}.pem', 'wb') as file:
                    file.write(certificate.public_bytes(serialization.Encoding.PEM))

            except (PermissionError, IsADirectoryError) as error:
                raise ProgramError(f'{error.strerror}: {error.filename}')

            logging.info('Result: Fetched certificate')

        self.send_request(COMMAND_END_SESSION, {ELEMENT_REASON: REASON_NO_ACTION})

    def delete_certificate(self, device_name, database):
        self.send_request(COMMAND_DELETE_CERT_REQUEST, {})
        command, elements = self.receive_response()

        if command != COMMAND_DELETE_CERT_RESPONSE:
            raise ProgramError(f'Unexpected command: {command}')

        reason = elements.get(ELEMENT_REASON, -1)

        if reason != REASON_UPDATE_CERTIFICATE:
            logging.info('Error: Deleted certificate failed (%d)', reason)
        else:
            cursor = database.cursor()

            cursor.execute('UPDATE devices SET operation = ?, serial_number = NULL, certificate = NULL, not_valid_before = NULL, not_valid_after = NULL '
                           'WHERE device_name = ?',
                           ('none',
                            device_name))

            database.commit()

            if os.path.exists(f'{CapfConnection.certificates_dir}/{device_name}.pem'):
                try:
                    os.unlink(f'{CapfConnection.certificates_dir}/{device_name}.pem')
                except (PermissionError, IsADirectoryError) as error:
                    raise ProgramError(f'{error.strerror}: {error.filename}')

            logging.info('Result: Deleted certificate')

        self.send_request(COMMAND_END_SESSION, {ELEMENT_REASON: REASON_UPDATE_CERTIFICATE})


def main():
    try:
        short_options = 'p:t:A:i:d:H'
        long_options = ['port=', 'timeout=', 'capf=', 'issuer=', 'days=', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:])

        database_file = None
        certificates_dir = None
        validity_days = 365
        port = 3804
        timeout = 10
        capf_certificate_file = None
        issuer_certificate_file = None
        certificates_dir = None
        help = False

        for option, argument in options:
            if option in ('-p', '--port'):
                port = argument

                try:
                    port = int(port)

                    if port < 1 or port > 65535:
                        raise ValueError

                except ValueError:
                    raise ProgramError(f'Invalid port: {port}')

            elif option in ('-t', '--timeout'):
                timeout = argument

                try:
                    timeout = int(timeout)
                except ValueError:
                    raise ProgramError(f'Invalid timeout: {timeout}')

            elif option in ('-A', '--capf'):
                capf_certificate_file = argument

            elif option in ('-i', '--issuer'):
                issuer_certificate_file = argument

            elif option in ('-d', '--days'):
                validity_days = argument

                try:
                    validity_days = int(validity_days)

                    if validity_days < 1 or validity_days > 3560:
                        raise ValueError

                except ValueError:
                    raise ProgramError(f'Invalid days: {validity_days}')

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] DATABASE-FILE [ISSUED-CERTS-DIR]\n'
                  'Issue X509 certficates to phones.\n'
                  '\n'
                  '  -A, --capf CAPF-CERT-FILE        CAPF certificate\n'
                  '  -i, --issuer ISSUER-CERT-FILE    issuing (CA) certificate that will used for signing\n'
                  '  -p, --port PORT                  port CAPF server is listening on (default 3804)\n'
                  '  -t, --timeout TIMEOUT            connection timeout in seconds (default 10)\n'
                  '  -d, --days DAYS                  number of days the certificate will be valid (default 365)\n'
                  '  -H, --help                       print this help and exit\n'
                  '\n'
                  'If no ISSUER-CERT-FILE is supplied CAPF-CERT-FILE will be used.\n'
                  'ISSUED-CERTS-DIR defaults to the location of DATABASE-FILE.\n')

            return

        if len(arguments) < 1:
            raise ProgramError('No database file specified')

        database_file = arguments[0]

        if len(arguments) < 2:
            certificates_dir = os.path.dirname(database_file)
        else:
            certificates_dir = arguments[1]

        if capf_certificate_file is None:
            raise ProgramError('No CAPF certificate file specified')

        if issuer_certificate_file is None:
            issuer_certificate_file = capf_certificate_file

        CapfConnection.database_file = database_file
        CapfConnection.certificates_dir = certificates_dir
        CapfConnection.issuer_certificate_file = issuer_certificate_file
        CapfConnection.validity_days = validity_days

        capf_server = CapfServer(port, timeout, capf_certificate_file)
        capf_server.run()

    except ProgramError as error:
        logging.error('%s', error)
        exit(1)

    except Exception:
        logging.error('%s', traceback.format_exc())
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
