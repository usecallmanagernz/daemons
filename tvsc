#!/usr/bin/env python3
#
# Copyright (c) 2021 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
import socket
import ssl
import struct
import binascii

from cryptography import x509
from cryptography.hazmat import backends
from cryptography.hazmat.primitives import serialization, hashes


PROTOCOL_ID = 87
PROTOCOL_VERSION = 1

COMMAND_NONE = 0
COMMAND_VERIFY_REQUEST = 1
COMMAND_VERIFY_RESPONSE = 2
COMMAND_QUERY_REQUEST = 3
COMMAND_QUERY_RESPONSE = 4

ELEMENT_DEVICE_NAME = 1
ELEMENT_CERTIFICATE = 2
ELEMENT_STATUS = 7
ELEMENT_ROLES = 8
ELEMENT_TTL = 9

STATUS_VALID = 0
STATUS_INVALID = 1

ROLE_SAST = 0
ROLE_CCM = 1
ROLE_CCM_TFTP = 2
ROLE_TFTP = 3
ROLE_CAPF = 4
ROLE_APP_SERVER = 7
ROLE_TVS = 21


class ProgramError(Exception):
    pass


class TvsClient:
    session_id = 0

    def __init__(self, hostname, port, timeout, tvs_certificate_file):
        self.socket = None
        self.session_id = None

        ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)

        try:
            if os.path.isdir(tvs_certificate_file):
                ssl_context.load_verify_locations(cadir = tvs_certificate_file)
            else:
                ssl_context.load_verify_locations(cafile = tvs_certificate_file)

        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'Unable to load {tvs_certificate_file}: {error.strerror}')

        ssl_context.verify_mode = ssl.CERT_REQUIRED
        ssl_context.check_hostname = False

        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(timeout)

            self.socket = ssl_context.wrap_socket(self.socket, server_side = False)
            self.socket.connect((hostname, port))

        except ssl.SSLError as error:
            raise ProgramError(error.reason)

        except OSError as error:
            raise ProgramError(error.strerror)

    def __del__(self):
        if self.socket is not None:
            self.socket.close()

    def send_request(self, command, elements):
        request = bytearray(struct.pack('> B B B B I H', PROTOCOL_ID, PROTOCOL_VERSION, command, 0, self.session_id, 0))

        for tag, value in elements.items():
            if tag == ELEMENT_DEVICE_NAME:
                device_name = value
                device_name = b'\x01' + device_name.encode('utf-8')

                request += struct.pack('> B H', ELEMENT_DEVICE_NAME, len(device_name))
                request += device_name

            elif tag == ELEMENT_CERTIFICATE:
                certificate = value

                request += struct.pack('> B H', ELEMENT_CERTIFICATE, len(certificate))
                request += certificate

            else:
                raise ProgramError(f'Unknown element tag: {tag}')

        struct.pack_into('> H', request, 8, len(request) - 10)
        self.socket.sendall(request)

    def receive_response(self):
        response = bytearray(self.socket.recv(10))

        if not len(response):
            raise ProgramError('Server closed socket')

        if len(response) != 10:
            raise ProgramError('Invalid header length')

        (protocol_id, version, command, session_id, length) = struct.unpack_from('> B B B x I H', response, 0)

        if protocol_id != PROTOCOL_ID:
            raise ProgramError(f'Invalid protocol ID: {protocol_id}')

        if version != PROTOCOL_VERSION:
            raise ProgramError(f'Invalid protocol version: {version}')

        if session_id != self.session_id:
            raise ProgramError(f'Mismatched session ID: {session_id}')

        while len(response) < (length + 10):
            response_chunk = self.socket.recv((length + 10) - len(response))

            if not len(response_chunk):
                break

            response += response_chunk

        if len(response) != (length + 10):
            raise ProgramError('Truncated response')

        elements = {}
        index = 10

        while index < len(response):
            (tag, length) = struct.unpack_from('> B H', response, index)
            index += 3

            if tag == ELEMENT_STATUS:
                status = response[index]
                elements[ELEMENT_STATUS] = status

            elif tag == ELEMENT_ROLES:
                roles = []

                for role in response[index:index + length]:
                    roles.append(role)

                elements[ELEMENT_ROLES] = roles

            elif tag == ELEMENT_TTL:
                (ttl,) = struct.unpack_from('> I', response, index)
                elements[ELEMENT_TTL] = ttl

            else:
                raise ProgramError(f'Unknown element tag: {tag}')

            index += length

        return command, elements

    def verify_certificate(self, device_name, certificate_file):
        try:
            with open(certificate_file, 'rb') as file:
                certificate = file.read()

        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        try:
            certificate = x509.load_pem_x509_certificate(certificate, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No certificate in file: {certificate_file}')

        serial_number = certificate.serial_number
        serial_number = serial_number.to_bytes((serial_number.bit_length() + 7) // 8, byteorder = 'big')
        serial_number = binascii.hexlify(serial_number).decode('utf-8')

        TvsClient.session_id += 1
        self.session_id = TvsClient.session_id

        self.send_request(COMMAND_VERIFY_REQUEST, {
            ELEMENT_DEVICE_NAME: device_name,
            ELEMENT_CERTIFICATE: certificate.public_bytes(serialization.Encoding.DER)
        })

        command, elements = self.receive_response()

        if command != COMMAND_VERIFY_RESPONSE:
            raise ProgramError(f'Unexpected command: {command}')

        print(f'Serial Number:    {serial_number}')

        subject_name = ''

        for attribute in certificate.subject:
            subject_name += (';' if len(subject_name) else '') + attribute.rfc4514_string()

        print(f'Subject Name:     {subject_name}')

        issuer_name = ''

        for attribute in certificate.issuer:
            issuer_name += (';' if len(issuer_name) else '') + attribute.rfc4514_string()

        print(f'Issuer Name:      {issuer_name}')

        certificate_hash = certificate.fingerprint(hashes.SHA256())
        certificate_hash = binascii.hexlify(certificate_hash).decode('utf-8')

        print(f'Certificate Hash: {certificate_hash}')

        status = elements.get(ELEMENT_STATUS, None)

        if status is None:
            raise ProgramError('No status element')

        print('Status:           ', end = '')

        if status == STATUS_VALID:
            print('Valid')
        else:
            print('Invalid')

        roles = elements.get(ELEMENT_ROLES, [])

        for role in roles:
            print('Role:             ', end = '')

            if role == ROLE_SAST:
                print('SAST')
            elif role == ROLE_CCM:
                print('CCM')
            elif role == ROLE_CCM_TFTP:
                print('CCM+TFTP')
            elif role == ROLE_TFTP:
                print('TFTP')
            elif role == ROLE_CAPF:
                print('CAPF')
            elif role == ROLE_APP_SERVER:
                print('APP-SERVER')
            elif role == ROLE_TVS:
                print('TVS')
            else:
                print(f'{role}')

        ttl = elements.get(ELEMENT_TTL, None)

        if ttl is not None:
            print(f'TTL:              {ttl} seconds')


def main():
    try:
        short_options = 'h:t:T:d:H'
        long_options = ['host=', 'timeout=', 'tvs=', 'device=', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:])

        hostname = None
        port = 2445
        timeout = 10
        tvs_certificate_file = None
        device_name = 'CP-0000-SEP000000000000'
        help = False

        for option, argument in options:
            if option in ('-h', '--host'):
                hostname = argument

                if ':' in hostname:
                    hostname, port = hostname.rsplit(':', maxsplit = 1)

                    try:
                        port = int(port)

                        if port < 1 or port > 65535:
                            raise ValueError

                    except ValueError:
                        raise ProgramError(f'Invalid port: {port}')

                if not re.search(r'(?xi) ^ (?: [a-z0-9\-]+ \.)* [a-z0-9\-]+ $', hostname):
                    raise ProgramError(f'Invalid host: {hostname}')

            elif option in ('-t', '--timeout'):
                timeout = argument

                try:
                    timeout = int(timeout)
                except ValueError:
                    raise ProgramError(f'Invalid timeout: {timeout}')

            elif option in ('-T', '--tvs'):
                tvs_certificate_file = argument

            elif option in ('-d', '--device'):
                device_name = argument

                if not re.search(r'(?x) ^ CP - [0-9]{4} - SEP [0-9A-F]{12} $', device_name):
                    raise ProgramError(f'Invalid device name: {device_name}')

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] CERT-FILE\n'
                  'Query the validity of a certificate using a TVS server.\n'
                  '\n'
                  '  -T, --tvs TVS-CERT-FILE     TVS certificate file or directory\n'
                  '  -h, --host HOST[:PORT]      host name or IP address and port of the TVS server\n'
                  '  -t, --timeout TIMEOUT       connection timeout in seconds (default 10)\n'
                  '  -d, --device DEVICE-NAME    device name in CP-MODEL-SEPMAC format (default CP-0000-SEP000000000000)\n'
                  '  -H, --help                  print this help and exit\n'
                  '\n'
                  'Default TVS server PORT is 2445')

            return

        if not len(arguments):
            raise ProgramError('No certificate file specified')

        certificate_file = arguments[0]

        if hostname is None:
            raise ProgramError('No host specified')

        if tvs_certificate_file is None:
            raise ProgramError('No TVS certificate file specified')

        tvs_client = TvsClient(hostname, port, timeout, tvs_certificate_file)
        tvs_client.verify_certificate(device_name, certificate_file)

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
