#!/usr/bin/env python3
#
# Copyright (c) 2021 Gareth Palmer <gareth.palmer3@gmail.com>
# This program is free software, distributed under the terms of
# the GNU General Public License Version 2.

import sys
import os.path
import re
import getopt
import traceback
import socket
import ssl
import struct

from cryptography import x509
from cryptography.hazmat import backends
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa, ec


PROTOCOL_ID = 85
PROTOCOL_VERSION = 3

COMMAND_AUTH_REQUEST = 1
COMMAND_AUTH_RESPONSE = 2
COMMAND_KEY_GENERATE_REQUEST = 3
COMMAND_KEY_GENERATE_RESPONSE = 4
COMMAND_ENCRYPT_RESPONSE = 5
COMMAND_ENCRYPT_REQUEST = 6
COMMAND_DECRYPT_REQUEST = 7
COMMAND_DECRYPT_RESPONSE = 8
COMMAND_STORE_CERTIFICATE_REQUEST = 9
COMMAND_STORE_CERTIFICATE_RESPONSE = 10
COMMAND_FETCH_CERTIFICATE_REQUEST = 11
COMMAND_FETCH_CERTIFICATE_RESPONSE = 12
COMMAND_DELETE_CERTIFICATE_REQUEST = 13
COMMAND_DELETE_CERTIFICATE_RESPONSE = 14
COMMAND_END_SESSION = 15
COMMAND_RETRY_LATER = 16
COMMAND_REQUEST_IN_PROGRESS = 17
COMMAND_STATUS_REQUEST = 18
COMMAND_STATUS_RESPONSE = 19
COMMAND_ABORT_REQUEST = 20
COMMAND_ABORT_RESPONSE = 21
COMMAND_SIGN_CERTIFICATE_REQUEST = 22
COMMAND_SIGN_CERTIFICATE_RESPONSE = 23

ELEMENT_REASON = 1
ELEMENT_REASON_INFO = 2
ELEMENT_CERTIFICATE_TYPE = 3
ELEMENT_CERTIFICATE = 4
ELEMENT_CERTIFICATE_ID = 5
ELEMENT_SIGNED_DATA = 6
ELEMENT_VERSION = 7
ELEMENT_AUTH_TYPE = 8
ELEMENT_PUBLIC_KEY = 9
ELEMENT_KEY_SIZE = 10
ELEMENT_PASSWORD = 11
ELEMENT_RETRY_DELAY = 12
ELEMENT_DEVICE_NAME = 13
ELEMENT_SUDI_DATA = 16
ELEMENT_KEY_TYPE = 17
ELEMENT_CURVE = 18
ELEMENT_DIGEST_TYPE = 19
ELEMENT_SHA2_SIGNED_DATA = 20

REASON_NO_ACTION = 0
REASON_UPDATE_CERTIFICATE = 1
REASON_INVALID_ELEMENT = 7
REASON_UNKNOWN_DEVICE = 9

HASH_SHA1 = 1
HASH_SHA256 = 2
HASH_SHA512 = 3

CERTIFICATE_TYPE_LSC = 1
CERTIFICATE_TYPE_MIC = 2

KEY_TYPE_RSA = 0
KEY_TYPE_EC = 1

CURVE_SECP256R1 = 0
CURVE_SECP384R1 = 1
CURVE_SECP521R1 = 2


class ProgramError(Exception):
    pass


class CapfClient:
    def __init__(self, hostname, port, timeout, capf_certificate_file):
        self.socket = None
        self.session_id = None

        ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)

        try:
            if os.path.isdir(capf_certificate_file):
                ssl_context.load_verify_locations(cadir = capf_certificate_file)
            else:
                ssl_context.load_verify_locations(cafile = capf_certificate_file)

        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'Unable to load {capf_certificate_file}: {error.strerror}')

        ssl_context.verify_mode = ssl.CERT_REQUIRED
        ssl_context.check_hostname = False

        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(timeout)

            self.socket = ssl_context.wrap_socket(self.socket)
            self.socket.connect((hostname, port))

        except ssl.SSLError as error:
            raise ProgramError(error.reason)

        except OSError as error:
            raise ProgramError(error.strerror)

    def __del__(self):
        if self.socket is not None:
            self.socket.close()

    def send_response(self, command, elements):
        response = bytearray(struct.pack('> B B I H', PROTOCOL_ID, command, self.session_id, 0))

        for tag, value in elements.items():
            if tag == ELEMENT_REASON:
                reason = value
                response += struct.pack('> B H B', ELEMENT_REASON, 1, reason)

            elif tag == ELEMENT_CERTIFICATE_TYPE:
                certificate_type = value
                response += struct.pack('> B H B', ELEMENT_CERTIFICATE_TYPE, 1, certificate_type)

            elif tag == ELEMENT_CERTIFICATE:
                certificate = value
                certificate = struct.pack('> B H B B', 1, len(certificate) + 2, 0, CERTIFICATE_TYPE_LSC) + certificate

                response += struct.pack('> B H', ELEMENT_CERTIFICATE, len(certificate))
                response += certificate

            elif tag == ELEMENT_SIGNED_DATA:
                signed_data = value

                response += struct.pack('> B H', ELEMENT_SIGNED_DATA, len(signed_data))
                response += signed_data

            elif tag == ELEMENT_VERSION:
                version = value
                response += struct.pack('> B H B', ELEMENT_VERSION, 1, version)

            elif tag == ELEMENT_PASSWORD:
                password = value
                password = password.encode('utf-8') + b'\x00'

                response += struct.pack('> B H', ELEMENT_PASSWORD, len(password))
                response += password

            elif tag == ELEMENT_DEVICE_NAME:
                device_name = value
                device_name = device_name.encode('utf-8') + b'\x00'

                response += struct.pack('> B H', ELEMENT_DEVICE_NAME, len(device_name))
                response += device_name

            elif tag == ELEMENT_SUDI_DATA:
                sudi_data = value

                response += struct.pack('> B H', ELEMENT_SUDI_DATA, len(sudi_data))
                response += sudi_data

            elif tag == ELEMENT_PUBLIC_KEY:
                public_key = value

                response += struct.pack('> B H', ELEMENT_PUBLIC_KEY, len(public_key))
                response += public_key

            elif tag == ELEMENT_SHA2_SIGNED_DATA:
                sha2_signed_data = value

                response += struct.pack('> B H', ELEMENT_SHA2_SIGNED_DATA, len(sha2_signed_data))
                response += sha2_signed_data

            else:
                raise ProgramError(f'Unknown element tag: {tag}')

        struct.pack_into('> H', response, 6, len(response) - 8)
        self.socket.sendall(response)

    def receive_request(self):
        request = bytearray(self.socket.recv(8))

        if not len(request):
            raise ProgramError('Server closed socket')

        if len(request) != 8:
            raise ProgramError('Invalid header length')

        (protocol_id, command, session_id, length) = struct.unpack('> B B I H', request)

        if protocol_id != PROTOCOL_ID:
            raise ProgramError(f'Invalid protocol ID: {protocol_id}')

        if self.session_id is None:
            self.session_id = session_id
        elif session_id != self.session_id:
            raise ProgramError(f'Mismatched session ID: {session_id}')

        while len(request) < (length + 8):
            request_chunk = self.socket.recv((length + 8) - len(request))

            if not len(request_chunk):
                break

            request += request_chunk

        if len(request) != (length + 8):
            raise ProgramError('Truncated request')

        elements = {}
        index = 8

        while index < len(request):
            (tag, length) = struct.unpack_from('> B H', request, index)
            index += 3

            if tag == ELEMENT_REASON:
                reason = request[index]
                elements[ELEMENT_REASON] = reason

            elif tag == ELEMENT_REASON_INFO:
                reason_info = request[index:index + length]
                reason_info = reason_info[:1].decode('utf-8')

                elements[ELEMENT_REASON_INFO] = reason_info

            elif tag == ELEMENT_CERTIFICATE_TYPE:
                certificate_type = request[index]
                elements[ELEMENT_CERTIFICATE_TYPE] = certificate_type

            elif tag == ELEMENT_CERTIFICATE:
                certificate = request[index:index + length]
                certificate = bytes(certificate[5:])

                elements[ELEMENT_CERTIFICATE] = certificate

            elif tag == ELEMENT_VERSION:
                version = request[index]
                elements[ELEMENT_VERSION] = version

            elif tag == ELEMENT_AUTH_TYPE:
                auth_type = request[index]
                elements[ELEMENT_AUTH_TYPE] = auth_type

            elif tag == ELEMENT_KEY_SIZE:
                (key_size,) = struct.unpack_from('> H', request, index)
                elements[ELEMENT_KEY_SIZE] = key_size

            elif tag == ELEMENT_KEY_TYPE:
                key_type = request[index]
                elements[ELEMENT_KEY_TYPE] = key_type

            elif tag == ELEMENT_CURVE:
                curve = request[index]
                elements[ELEMENT_CURVE] = curve

            else:
                raise ProgramError(f'Unknown element tag: {tag}')

            index += length

        return command, elements

    def scheduled_operation(self, device_name, password, local_certificate_file, sudi_certificate_file, certificate_file):
        command, elements = self.receive_request()

        if command != COMMAND_AUTH_REQUEST:
            raise ProgramError(f'Unexpected command: {command}')

        version = elements.get(ELEMENT_VERSION, None)

        if version != PROTOCOL_VERSION:
            raise ProgramError(f'Invalid protocol version: {version}')

        auth_elements = {ELEMENT_PASSWORD: password or ''}

        if local_certificate_file is not None:
            certificate, signed_data, sha2_signed_data = self.get_signed_data(device_name, local_certificate_file)
            sudi_data = self.get_sudi_data(sudi_certificate_file or local_certificate_file)

            auth_elements.update({
                ELEMENT_CERTIFICATE: certificate,
                ELEMENT_SIGNED_DATA: signed_data,
                ELEMENT_SHA2_SIGNED_DATA: sha2_signed_data,
                ELEMENT_SUDI_DATA: sudi_data
            })

        self.send_response(COMMAND_AUTH_RESPONSE, {
            ELEMENT_REASON: REASON_UPDATE_CERTIFICATE,
            ELEMENT_VERSION: version,
            ELEMENT_DEVICE_NAME: device_name,
            **auth_elements
        })

        command, elements = self.receive_request()

        if command == COMMAND_KEY_GENERATE_REQUEST:
            key_type = elements.get(ELEMENT_KEY_TYPE, None)
            key_size = elements.get(ELEMENT_KEY_SIZE, None)
            curve = elements.get(ELEMENT_CURVE, None)

            self.generate_key(key_type, key_size, curve, certificate_file)

        elif command == COMMAND_FETCH_CERTIFICATE_REQUEST:
            self.store_certificate(certificate_file)

        elif command == COMMAND_DELETE_CERTIFICATE_REQUEST:
            self.delete_certificate(certificate_file)

        elif command == COMMAND_END_SESSION:
            reason = elements.get(ELEMENT_REASON, -1)

            if reason in (REASON_NO_ACTION, REASON_UPDATE_CERTIFICATE):
                print('No scheduled operation')
            elif reason == REASON_UNKNOWN_DEVICE:
                print(f'Unknown device: {device_name}')
            else:
                print(f'Server ended session: {reason}')

        else:
            raise ProgramError(f'Unexpected command: {command}')

    def get_signed_data(self, device_name, local_certificate_file):
        try:
            with open(local_certificate_file, 'rb') as file:
                certificate = private_key = file.read()

        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        try:
            certificate = x509.load_pem_x509_certificate(certificate, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No certificate in file: {local_certificate_file}')

        public_key = certificate.public_key()

        if not isinstance(public_key, (rsa.RSAPublicKey, ec.EllipticCurvePublicKey)):
            raise ProgramError(f'No RSA or EC public-key in file: {local_certificate_file}')

        try:
            private_key = serialization.load_pem_private_key(private_key, None, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No private-key in file: {local_certificate_file}')

        if not isinstance(private_key, (rsa.RSAPrivateKey, ec.EllipticCurvePrivateKey)):
            raise ProgramError(f'No RSA or EC private-key in file: {local_certificate_file}')

        certificate = certificate.public_bytes(serialization.Encoding.DER)
        auth_data = device_name.encode('utf-8') + b'\x00' + certificate

        if isinstance(private_key, rsa.RSAPrivateKey):
            hash = hashes.Hash(hashes.SHA1(), backends.default_backend())
            hash.update(auth_data)
            sha1_hash = hash.finalize()

            hash = hashes.Hash(hashes.SHA512(), backends.default_backend())
            hash.update(auth_data)
            sha2_hash = hash.finalize()

            backend = backends.default_backend()

            private_key = backend._lib.EVP_PKEY_get1_RSA(private_key._evp_pkey)
            private_key = backend._ffi.gc(private_key, backend._lib.RSA_free)

            key_encrypt = backend._ffi.new('unsigned char[]', backend._lib.RSA_size(private_key))

            if backend._lib.RSA_private_encrypt(len(sha1_hash), sha1_hash, key_encrypt, private_key, backend._lib.RSA_PKCS1_PADDING) == -1:
                error = backend._lib.ERR_get_error()
                backend._lib.ERR_clear_error()

                raise ProgramError(f'RSA private-encrypt: {error}')

            signed_data = bytes(backend._ffi.buffer(key_encrypt))

            if backend._lib.RSA_private_encrypt(len(sha2_hash), sha2_hash, key_encrypt, private_key, backend._lib.RSA_PKCS1_PADDING) == -1:
                error = backend._lib.ERR_get_error()
                backend._lib.ERR_clear_error()

                raise ProgramError(f'SHA2 RSA private-encrypt: {error}')

            sha2_signed_data = bytes(backend._ffi.buffer(key_encrypt))

        elif isinstance(private_key, ec.EllipticCurvePrivateKey):
            signed_data = private_key.sign(auth_data, ec.ECDSA(hashes.SHA1()))
            sha2_signed_data = private_key.sign(auth_data, ec.ECDSA(hashes.SHA512()))

        sha2_signed_data = struct.pack('> B H', HASH_SHA512, len(sha2_signed_data)) + sha2_signed_data

        return certificate, signed_data, sha2_signed_data

    def get_sudi_data(self, sudi_certificate_file):
        try:
            with open(sudi_certificate_file, 'rb') as file:
                certificate = private_key = file.read()

        except (PermissionError, FileNotFoundError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        try:
            certificate = x509.load_pem_x509_certificate(certificate, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No certificate in file: {sudi_certificate_file}')

        public_key = certificate.public_key()

        if not isinstance(public_key, rsa.RSAPublicKey):
            raise ProgramError(f'No RSA public-key in file: {sudi_certificate_file}')

        try:
            private_key = serialization.load_pem_private_key(private_key, None, backends.default_backend())
        except ValueError:
            raise ProgramError(f'No private-key in file: {sudi_certificate_file}')

        if not isinstance(private_key, rsa.RSAPrivateKey):
            raise ProgramError(f'No RSA private-key in file: {sudi_certificate_file}')

        certificate = certificate.public_bytes(serialization.Encoding.DER)
        auth_data = struct.pack('< I', self.session_id) + certificate

        sudi_data = bytearray()

        sudi_data += struct.pack('> B H', 0, len(certificate))
        sudi_data += certificate

        hash = hashes.Hash(hashes.SHA1(), backends.default_backend())
        hash.update(auth_data)
        sha1_hash = hash.finalize()

        hash = hashes.Hash(hashes.SHA512(), backends.default_backend())
        hash.update(auth_data)
        sha2_hash = hash.finalize()

        backend = backends.default_backend()

        private_key = backend._lib.EVP_PKEY_get1_RSA(private_key._evp_pkey)
        private_key = backend._ffi.gc(private_key, backend._lib.RSA_free)

        key_encrypt = backend._ffi.new('unsigned char[]', backend._lib.RSA_size(private_key))

        if backend._lib.RSA_private_encrypt(len(sha1_hash), sha1_hash, key_encrypt, private_key, backend._lib.RSA_PKCS1_PADDING) == -1:
            error = backend._lib.ERR_get_error()
            backend._lib.ERR_clear_error()

            raise ProgramError(f'SUDI RSA private-encrypt: {error}')

        signed_data = bytes(backend._ffi.buffer(key_encrypt))

        if backend._lib.RSA_private_encrypt(len(sha2_hash), sha2_hash, key_encrypt, private_key, backend._lib.RSA_PKCS1_PADDING) == -1:
            error = backend._lib.ERR_get_error()
            backend._lib.ERR_clear_error()

            raise ProgramError(f'SUDI SHA2 RSA private-encrypt: {error}')

        sha2_signed_data = bytes(backend._ffi.buffer(key_encrypt))

        sudi_data += struct.pack('> B H', HASH_SHA1, len(signed_data))
        sudi_data += signed_data

        sudi_data += struct.pack('> B H', HASH_SHA512, len(sha2_signed_data))
        sudi_data += sha2_signed_data

        return sudi_data

    def generate_key(self, key_type, key_size, curve, certificate_file):
        self.send_response(COMMAND_REQUEST_IN_PROGRESS, {})

        if key_type == KEY_TYPE_RSA:
            if key_size not in (512, 1024, 2048, 3072, 4096):
                raise ProgramError(f'Invalid key-size: {key_size}')

            private_key = rsa.generate_private_key(65537, key_size, backends.default_backend())

        elif key_type == KEY_TYPE_EC:
            if curve == CURVE_SECP256R1:
                curve_algorithm = ec.SECP256R1
            elif curve == CURVE_SECP384R1:
                curve_algorithm = ec.SECP384R1
            elif curve == CURVE_SECP521R1:
                curve_algorithm = ec.SECP521R1
            else:
                raise ProgramError(f'Invalid curve: {curve}')

            private_key = ec.generate_private_key(curve_algorithm, backends.default_backend())

        else:
            raise ProgramError(f'Invalid key-type: {key_type}')

        public_key = private_key.public_key()

        self.send_response(COMMAND_KEY_GENERATE_RESPONSE, {
            ELEMENT_PUBLIC_KEY: public_key.public_bytes(serialization.Encoding.DER, serialization.PublicFormat.SubjectPublicKeyInfo)
        })

        command, elements = self.receive_request()

        if command != COMMAND_STORE_CERTIFICATE_REQUEST:
            raise ProgramError(f'Unexpected command: {command}')

        certificate = elements.get(ELEMENT_CERTIFICATE, None)

        if certificate is None:
            raise ProgramError('Missing certificate element')

        try:
            certificate = x509.load_der_x509_certificate(certificate, backends.default_backend())
        except ValueError:
            raise ProgramError('Invalid certificate')

        try:
            with open(certificate_file, 'wb') as file:
                file.write(certificate.public_bytes(serialization.Encoding.PEM))
                file.write(private_key.private_bytes(serialization.Encoding.PEM, serialization.PrivateFormat.PKCS8, serialization.NoEncryption()))

        except (PermissionError, IsADirectoryError) as error:
            raise ProgramError(f'{error.strerror}: {error.filename}')

        print(f'Wrote {certificate_file}')

        self.send_response(COMMAND_STORE_CERTIFICATE_RESPONSE, {
            ELEMENT_REASON: REASON_UPDATE_CERTIFICATE
        })

        command, elements = self.receive_request()

        if command != COMMAND_END_SESSION:
            raise ProgramError(f'Unexpected command: {command}')

    def store_certificate(self, certificate_file):
        if os.path.exists(certificate_file):
            try:
                with open(certificate_file, 'rb') as file:
                    certificate = file.read()

            except (PermissionError, IsADirectoryError) as error:
                raise ProgramError(f'{error.strerror}: {error.filename}')

            try:
                certificate = x509.load_pem_x509_certificate(certificate, backends.default_backend())
            except ValueError:
                raise ProgramError('Invalid certificate')

            self.send_response(COMMAND_FETCH_CERTIFICATE_RESPONSE, {
                ELEMENT_REASON: REASON_UPDATE_CERTIFICATE,
                ELEMENT_CERTIFICATE: certificate.public_bytes(serialization.Encoding.DER)
            })

            print(f'Stored {certificate_file}')

        else:
            self.send_response(COMMAND_FETCH_CERTIFICATE_RESPONSE, {ELEMENT_REASON: REASON_INVALID_ELEMENT})

            print(f'{certificate_file} does not exist')

        command, _ = self.receive_request()

        if command != COMMAND_END_SESSION:
            raise ProgramError(f'Unexpected command: {command}')

    def delete_certificate(self, certificate_file):
        if os.path.exists(certificate_file):
            try:
                os.unlink(certificate_file)
            except (PermissionError, IsADirectoryError) as error:
                raise ProgramError(f'{error.strerror}: {error.filename}')

            self.send_response(COMMAND_DELETE_CERTIFICATE_RESPONSE, {ELEMENT_REASON: REASON_UPDATE_CERTIFICATE})

            print(f'Deleted {certificate_file}')

        else:
            self.send_response(COMMAND_DELETE_CERTIFICATE_RESPONSE, {ELEMENT_REASON: REASON_INVALID_ELEMENT})

            print(f'{certificate_file} does not exist')

        command, _ = self.receive_request()

        if command != COMMAND_END_SESSION:
            raise ProgramError(f'Unexpected command: {command}')


def main():
    try:
        short_options = 'h:t:A:p:l:s:c:H'
        long_options = ['host=', 'timeout=', 'capf=', 'password=', 'lsc=', 'sudi=', 'certificate=', 'help']

        try:
            options, arguments = getopt.gnu_getopt(sys.argv[1:], short_options, long_options)
        except getopt.GetoptError as error:
            raise ProgramError(error.msg[0].upper() + error.msg[1:])

        hostname = None
        port = 3804
        timeout = 10
        capf_certificate_file = None
        password = None
        local_certificate_file = None
        sudi_certificate_file = None
        certificate_file = None
        help = False

        for option, argument in options:
            if option in ('-h', '--host'):
                hostname = argument

                if ':' in hostname:
                    hostname, port = hostname.rsplit(':', maxsplit = 1)

                    try:
                        port = int(port)

                        if port < 1 or port > 65535:
                            raise ValueError

                    except ValueError:
                        raise ProgramError(f'Invalid port: {port}')

                if not re.search(r'(?xi) ^ (?: [a-z0-9\-]+ \.)* [a-z0-9\-]+ $', hostname):
                    raise ProgramError(f'Invalid host: {hostname}')

            elif option in ('-t', '--timeout'):
                timeout = argument

                try:
                    timeout = int(timeout)

                    if timeout < 1:
                        raise ValueError

                except ValueError:
                    raise ProgramError(f'Invalid timeout: {timeout}')

            elif option in ('-A', '--capf'):
                capf_certificate_file = argument

            elif option in ('-p', '--password'):
                password = argument

                if not re.search(r'(?x) [0-9]{4,16} $', password):
                    raise ProgramError(f'Invalid password: {password}')

            elif option in ('-l', '--lsc'):
                local_certificate_file = argument

            elif option in ('-s', '--sudi'):
                sudi_certificate_file = argument

            elif option in ('-c', '--certificate'):
                certificate_file = argument

            elif option in ('-H', '--help'):
                help = True

        if help:
            print('Usage: ' + os.path.basename(sys.argv[0]) + ' [OPTIONS] DEVICE-NAME\n'
                  'Get a certificate from a CAPF server.\n'
                  '\n'
                  '  -A, --capf CAPF-CERT-FILE      CAPF certificate file or directory\n'
                  '  -h, --host HOST[:PORT]         host name or IP address and port of the CAPF server\n'
                  '  -t, --timeout TIMEOUT          connection timeout in seconds (default 10)\n'
                  '  -p, --password PASSWORD        authentication password, 4 to 16 numbers\n'
                  '  -l, --lsc CERT-FILE            authentication RSA or EC LSC certificate\n'
                  '  -s, --sudi CERT-FILE           authentication RSA SUDI certificate (default --lsc)\n'
                  '  -c, --certificate CERT-FILE    device certificate (default DEVICE-NAME.pem)\n'
                  '  -H, --help                     print this help and exit\n'
                  '\n'
                  'DEVICE-NAME is in SEPMAC format, eg: SEP58971ECC97C1.\n'
                  'Default PORT for CAPF server is 3804.\n')

            return

        if not len(arguments):
            raise ProgramError('No device name specified')

        device_name = arguments[0]

        if not re.search(r'(?x) ^ SEP [0-9A-F]{12} $', device_name):
            raise ProgramError(f'Invalid device name: {device_name}')

        if certificate_file is None:
            certificate_file = device_name + '.pem'

        if hostname is None:
            raise ProgramError('No host specified')

        if capf_certificate_file is None:
            raise ProgramError('No CAPF certificate specified')

        capf_client = CapfClient(hostname, port, timeout, capf_certificate_file)
        capf_client.scheduled_operation(device_name, password, local_certificate_file, sudi_certificate_file, certificate_file)

    except ProgramError as error:
        print(str(error), file = sys.stderr)
        exit(1)

    except Exception:
        traceback.print_exc(file = sys.stderr)
        exit(1)

    exit(0)


if __name__ == '__main__':
    main()
